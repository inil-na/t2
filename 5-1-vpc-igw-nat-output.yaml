Description: MSP T2 Internship - inil.na.
  
Parameters:
  PrefixName:
    Description: An environment name that is prefixed to resource names
    Type: String

  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.0.0.0/16

  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.0.1.0/24

  PublicSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    Default: 10.0.2.0/24

  PrivateSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 10.0.3.0/24

  PrivateSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
    Type: String
    Default: 10.0.4.0/24
    
    
#####################################################################################################

Resources:
  i2VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}

# Public Subnet

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref i2VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
       - Key: Name
         Value: !Sub ${AWS::StackName} Public1
       - Key: Name2
         Value: !Sub ${PrefixName} Public Subnet (AZ1)
          
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref i2VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
       - Key: Name
         Value: !Sub ${AWS::StackName} Public2
       - Key: Name2
         Value: !Sub ${PrefixName} Public Subnet (AZ2)

# Private Subnet

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref i2VPC
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
       - Key: Name
         Value: !Sub ${AWS::StackName} Private1
       - Key: Name2
         Value: !Sub ${PrefixName} Private Subnet (AZ1)

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref i2VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
       - Key: Name
         Value: !Sub ${AWS::StackName} Private2
       - Key: Name2
         Value: !Sub ${PrefixName} Private Subnet (AZ2)         
          
# Internet gateway

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}
        - Key: Name2
          Value: !Ref PrefixName

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref i2VPC

# Public routing table
      
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref i2VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Public
        - Key: Name2
          Value: !Sub ${PrefixName} Public Routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

# NAT Gateway 1, NAT Gateway 2
      
  NatGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway2EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc
      
  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Public1

  NatGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway2EIP.AllocationId
      SubnetId: !Ref PublicSubnet2      
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Public2

# Private routing table 

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref i2VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Private
        - Key: Name2
          Value: !Sub ${PrefixName} Private Routes
          
  DefaultPrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet1
      
  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet2
      
      
# Output syntax
#Outputs:
#  Logical ID:
#    Description: Information about the value
#    Value: Value to return
#    Export:
#      Name: Value to export
# !GetAtt logicalNameOfResource.attributeName

# Outputs

Outputs:
  i2VPC:
    Description: A reference to the created VPC
    Value: !Ref i2VPC
    Export:
      Name: i2VPC
        
  i2VPCCIDR:
    Description: CIDR of the created VPC
    Value: !GetAtt i2VPC.CidrBlock
    Export:
      Name: i2VPCCIDR

#  PublicSubnets:
#    Description: A list of the public subnets
#    Value: !Join [ ",", [ !Ref PublicSubnet1, !Ref PublicSubnet2 ]]
#
#  PrivateSubnets:
#    Description: A list of the private subnets
#    Value: !Join [ ",", [ !Ref PrivateSubnet1, !Ref PrivateSubnet2 ]]

  PublicSubnet1:
    Description: A reference to the public subnet in the 1st AZ
    Value: !Ref PublicSubnet1
    Export:
      Name: PublicSubnet1
      
  PublicSubnet1CIDR:
    Description: CIDR        to the public subnet in the 1st AZ
    Value: !GetAtt PublicSubnet1.CidrBlock
    Export:
      Name: PublicSubnet1CIDR
      
  PublicSubnet2:
    Description: A reference to the public subnet in the 2nd AZ
    Value: !Ref PublicSubnet2
    Export:
      Name: PublicSubnet2
      
  PublicSubnet2CIDR:
    Description: CIDR        to the public subnet in the 1st AZ
    Value: !GetAtt PublicSubnet2.CidrBlock
    Export:
      Name: PublicSubnet2CIDR
      
  PrivateSubnet1:
    Description: A reference to the private subnet in the 1st AZ
    Value: !Ref PrivateSubnet1
    Export:
      Name: PrivateSubnet1
      
  PrivateSubnet1CIDR:
    Description: CIDR        to the private subnet in the 1st AZ
    Value: !GetAtt PrivateSubnet1.CidrBlock
    Export:
      Name: PrivateSubnet1CIDR
      
  PrivateSubnet2:
    Description: A reference to the private subnet in the 2nd AZ
    Value: !Ref PrivateSubnet2
    Export:
      Name: PrivateSubnet2
      
  PrivateSubnet2CIDR:
    Description: CIDR        to the private subnet in the 1st AZ
    Value: !GetAtt PrivateSubnet2.CidrBlock
    Export:
      Name: PrivateSubnet2CIDR
      
# Routing table
      
  PublicRouteTable:
    Description: Public RTB
    Value: !Ref PublicRouteTable
    Export:
      Name: PublicRouteTable
      
  PrivateRouteTable:
    Description: Private RTB
    Value: !Ref PrivateRouteTable
    Export:
      Name: PrivateRouteTable
      
      
      
      